"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletsProvider = void 0;
const app_1 = require("@wallet-standard/app");
const react_1 = __importStar(require("react"));
const useWallets_js_1 = require("./useWallets.js");
/** TODO: docs */
const WalletsProvider = ({ children }) => {
    // Initialize `window.navigator.wallets` and obtain a synchronous API.
    const { get, on } = (0, react_1.useMemo)(() => (0, app_1.getWallets)(), []);
    // Synchronously get the wallets that have registered already so that they can be accessed on the first render.
    const [wallets, setWallets] = (0, react_1.useState)(() => get());
    (0, react_1.useEffect)(() => {
        const destructors = [];
        // TODO: figure out if this can ever actually happen
        // FIXME: this can definitely happen, refactor similar to @solana/wallet-standard-wallet-adapter-react
        // Get and set the wallets that have been registered already, in case they changed since the state initializer.
        setWallets(get());
        // Add an event listener to add any wallets that are registered after this point.
        destructors.push(on('register', () => setWallets(get())));
        // Add an event listener to remove any wallets that are unregistered after this point.
        destructors.push(on('unregister', () => setWallets(get())));
        return () => destructors.forEach((destroy) => destroy());
    }, [get, on]);
    const contextValue = (0, react_1.useMemo)(() => ({
        wallets,
    }), [wallets]);
    return react_1.default.createElement(useWallets_js_1.WalletsContext.Provider, { value: contextValue }, children);
};
exports.WalletsProvider = WalletsProvider;
//# sourceMappingURL=WalletsProvider.js.map