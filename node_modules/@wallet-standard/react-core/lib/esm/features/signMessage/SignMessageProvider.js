import React, { useCallback, useMemo, useRef, useState } from 'react';
import { useWallet } from '../../useWallet.js';
import { SignMessageContext } from './useSignMessage.js';
/** TODO: docs */
export function hasSignMessageFeature(features) {
    return 'experimental:signMessage' in features;
}
/** TODO: docs */
export const SignMessageProvider = ({ children, onError }) => {
    const { features } = useWallet();
    // Handle errors, logging them by default.
    const handleError = useCallback((error) => {
        (onError || console.error)(error);
        return error;
    }, [onError]);
    // Sign messages with the wallet.
    const [waiting, setWaiting] = useState(false);
    const promise = useRef();
    const signMessage = useMemo(() => hasSignMessageFeature(features)
        ? async (...inputs) => {
            // If already waiting, wait for that promise to resolve.
            if (promise.current) {
                try {
                    await promise.current;
                }
                catch (error) {
                    // Error will already have been handled below.
                }
            }
            setWaiting(true);
            try {
                promise.current = features['experimental:signMessage'].signMessage(...inputs);
                return await promise.current;
            }
            catch (error) {
                throw handleError(error);
            }
            finally {
                setWaiting(false);
                promise.current = undefined;
            }
        }
        : undefined, [features, promise, handleError]);
    return (React.createElement(SignMessageContext.Provider, { value: {
            waiting,
            signMessage,
        } }, children));
};
//# sourceMappingURL=SignMessageProvider.js.map