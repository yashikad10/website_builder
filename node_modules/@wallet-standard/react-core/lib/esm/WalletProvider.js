import React, { useEffect, useState } from 'react';
import { getWalletProperties, WalletContext } from './useWallet.js';
/** TODO: docs */
export function hasEventsFeature(features) {
    return 'standard:events' in features;
}
/** TODO: docs */
export const WalletProvider = ({ children }) => {
    const [wallet, setWallet] = useState(null);
    const [{ version, name, icon, chains, features, accounts }, setWalletProperties] = useState(() => getWalletProperties(wallet));
    // When the wallet changes, set properties.
    useEffect(() => setWalletProperties(getWalletProperties(wallet)), [wallet]);
    // When the features change, listen for property changes if the wallet supports it.
    useEffect(() => {
        if (hasEventsFeature(features))
            return features['standard:events'].on('change', (properties) => setWalletProperties((currentProperties) => ({ ...currentProperties, ...properties })));
    }, [features]);
    return (React.createElement(WalletContext.Provider, { value: {
            wallet,
            setWallet,
            version,
            name,
            icon,
            chains,
            features,
            accounts,
        } }, children));
};
//# sourceMappingURL=WalletProvider.js.map