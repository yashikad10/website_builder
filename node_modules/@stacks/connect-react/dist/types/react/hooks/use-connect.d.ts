import { AuthOptions, ContractCallOptions, ContractCallRegularOptions, ContractCallSponsoredOptions, ContractDeployOptions, ContractDeployRegularOptions, ContractDeploySponsoredOptions, FinishedAuthData, PsbtRequestOptions, ProfileUpdateRequestOptions, SignatureRequestOptions, STXTransferOptions, STXTransferRegularOptions, STXTransferSponsoredOptions, StacksProvider, SignTransactionOptions } from '@stacks/connect';
import { StructuredDataSignatureRequestOptions } from '@stacks/connect/src/types/structuredDataSignature';
export declare const useConnect: () => {
    isOpen: boolean;
    isAuthenticating: boolean;
    authData: FinishedAuthData;
    authOptions: AuthOptions;
    userSession: import("@stacks/connect").UserSession;
    doOpenAuth: (signIn?: boolean, options?: Partial<AuthOptions>, provider?: StacksProvider) => void;
    doAuth: (options?: Partial<AuthOptions>, provider?: StacksProvider) => void;
    authenticate: (authOptions: AuthOptions, provider?: StacksProvider) => Promise<void>;
    doContractCall: (options: ContractCallOptions | ContractCallRegularOptions | ContractCallSponsoredOptions, provider?: StacksProvider) => Promise<void>;
    doContractDeploy: (options: ContractDeployOptions | ContractDeployRegularOptions | ContractDeploySponsoredOptions, provider?: StacksProvider) => Promise<void>;
    doSTXTransfer: (options: STXTransferOptions | STXTransferRegularOptions | STXTransferSponsoredOptions, provider?: StacksProvider) => Promise<void>;
    doSignTransaction: (options: SignTransactionOptions, provider?: StacksProvider) => Promise<void>;
    doProfileUpdate: (options: ProfileUpdateRequestOptions, provider?: StacksProvider) => Promise<void>;
    sign: (options: SignatureRequestOptions, provider?: StacksProvider) => Promise<void>;
    signStructuredData: (options: StructuredDataSignatureRequestOptions, provider?: StacksProvider) => Promise<void>;
    signPsbt: (options: PsbtRequestOptions, provider?: StacksProvider) => Promise<void>;
};
