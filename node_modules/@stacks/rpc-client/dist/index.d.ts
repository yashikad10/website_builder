/// <reference types="node" />
import BN from 'bn.js';
import { ClarityValue } from '@blockstack/stacks-transactions';
export interface Account {
    balance: BN;
    nonce: number;
}
export declare const toBN: (hex: string) => BN;
interface FetchContractInterface {
    contractAddress: string;
    contractName: string;
}
interface BufferArg {
    buffer: {
        length: number;
    };
}
export interface ContractInterfaceFunctionArg {
    name: string;
    type: string | BufferArg;
}
export interface ContractInterfaceFunction {
    name: string;
    access: 'public' | 'private' | 'read_only';
    args: ContractInterfaceFunctionArg[];
}
export interface ContractInterface {
    functions: ContractInterfaceFunction[];
}
interface CallReadOnly extends FetchContractInterface {
    args: ClarityValue[];
    functionName: string;
}
export declare class RPCClient {
    url: string;
    /**
     * @param url The base URL for the RPC server
     */
    constructor(url: string);
    fetchAccount(principal: string): Promise<Account>;
    broadcastTX(hex: Buffer): Promise<Response>;
    fetchContractInterface({ contractAddress, contractName, }: FetchContractInterface): Promise<ContractInterface>;
    callReadOnly({ contractName, contractAddress, functionName, args, }: CallReadOnly): Promise<any>;
    fetchContractSource({ contractName, contractAddress, }: {
        contractName: string;
        contractAddress: string;
    }): Promise<string | null>;
    fetchAddressTransactions({ address }: {
        address: string;
    }): Promise<import("@blockstack/stacks-blockchain-sidecar-types").Transaction[]>;
}
export default RPCClient;
