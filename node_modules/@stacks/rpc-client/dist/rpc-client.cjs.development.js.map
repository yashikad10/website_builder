{"version":3,"file":"rpc-client.cjs.development.js","sources":["../src/index.ts"],"sourcesContent":["import BN from 'bn.js';\nimport { serializeCV, ClarityValue } from '@blockstack/stacks-transactions';\nimport { TransactionResults } from '@blockstack/stacks-blockchain-sidecar-types';\nimport fetch from 'cross-fetch';\n\nexport interface Account {\n  balance: BN;\n  nonce: number;\n}\n\nexport const toBN = (hex: string) => {\n  return new BN(hex.slice(2), 16);\n};\n\ninterface FetchContractInterface {\n  contractAddress: string;\n  contractName: string;\n}\n\ninterface BufferArg {\n  buffer: {\n    length: number;\n  };\n}\n\nexport interface ContractInterfaceFunctionArg {\n  name: string;\n  type: string | BufferArg;\n}\n\nexport interface ContractInterfaceFunction {\n  name: string;\n  access: 'public' | 'private' | 'read_only';\n  args: ContractInterfaceFunctionArg[];\n}\n\nexport interface ContractInterface {\n  functions: ContractInterfaceFunction[];\n}\ninterface CallReadOnly extends FetchContractInterface {\n  args: ClarityValue[];\n  functionName: string;\n}\n\nexport class RPCClient {\n  url: string;\n\n  /**\n   * @param url The base URL for the RPC server\n   */\n  constructor(url: string) {\n    this.url = url;\n  }\n\n  async fetchAccount(principal: string): Promise<Account> {\n    const url = `${this.url}/v2/accounts/${principal}`;\n    const response = await fetch(url, {\n      credentials: 'omit',\n    });\n    const data = await response.json();\n    return {\n      balance: toBN(data.balance),\n      nonce: data.nonce,\n    };\n  }\n\n  async broadcastTX(hex: Buffer) {\n    const url = `${this.url}/v2/transactions`;\n    const response = await fetch(url, {\n      method: 'POST',\n      credentials: 'omit',\n      headers: {\n        'Content-Type': 'application/octet-stream',\n      },\n      body: hex,\n    });\n    return response;\n  }\n\n  async fetchContractInterface({\n    contractAddress,\n    contractName,\n  }: FetchContractInterface) {\n    const url = `${this.url}/v2/contracts/interface/${contractAddress}/${contractName}`;\n    const response = await fetch(url);\n    const contractInterface: ContractInterface = await response.json();\n    return contractInterface;\n  }\n\n  async callReadOnly({\n    contractName,\n    contractAddress,\n    functionName,\n    args,\n  }: CallReadOnly) {\n    const url = `${this.url}/v2/contracts/call-read/${contractAddress}/${contractName}/${functionName}`;\n    const argsStrings = args.map((arg) => {\n      return `0x${serializeCV(arg).toString('hex')}`;\n    });\n    const body = {\n      sender: 'SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0',\n      arguments: argsStrings,\n    };\n    console.log(body);\n    const response = await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Unable to call read-only function.`);\n    }\n    const data = await response.json();\n    console.log(data);\n    return data;\n  }\n\n  async fetchContractSource({\n    contractName,\n    contractAddress,\n  }: {\n    contractName: string;\n    contractAddress: string;\n  }) {\n    const url = `${this.url}/v2/contracts/source/${contractAddress}/${contractName}`;\n    const res = await fetch(url);\n    if (res.ok) {\n      const { source }: { source: string } = await res.json();\n      return source;\n    }\n    return null;\n  }\n\n  async fetchAddressTransactions({ address }: { address: string }) {\n    const url = `${this.url}/extended/v1/address/${address}/transactions`;\n    const res = await fetch(url);\n    const data: TransactionResults = await res.json();\n    return data.results;\n  }\n}\n\nexport default RPCClient;\n"],"names":["toBN","hex","BN","slice","RPCClient","url","fetchAccount","principal","fetch","credentials","response","json","data","balance","nonce","broadcastTX","method","headers","body","fetchContractInterface","contractAddress","contractName","callReadOnly","functionName","args","arguments","argsStrings","map","arg","serializeCV","toString","sender","console","log","JSON","stringify","ok","Error","fetchContractSource","res","source","fetchAddressTransactions","address","results"],"mappings":"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"}