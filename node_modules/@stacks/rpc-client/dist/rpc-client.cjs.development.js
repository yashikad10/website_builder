'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var BN = _interopDefault(require('bn.js'));
var stacksTransactions = require('@blockstack/stacks-transactions');
var fetch = _interopDefault(require('cross-fetch'));

var toBN = function toBN(hex) {
  return new BN(hex.slice(2), 16);
};
var RPCClient = /*#__PURE__*/function () {
  /**
   * @param url The base URL for the RPC server
   */
  function RPCClient(url) {
    this.url = url;
  }

  var _proto = RPCClient.prototype;

  _proto.fetchAccount = function fetchAccount(principal) {
    try {
      var _this2 = this;

      var url = _this2.url + "/v2/accounts/" + principal;
      return Promise.resolve(fetch(url, {
        credentials: 'omit'
      })).then(function (response) {
        return Promise.resolve(response.json()).then(function (data) {
          return {
            balance: toBN(data.balance),
            nonce: data.nonce
          };
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.broadcastTX = function broadcastTX(hex) {
    try {
      var _this4 = this;

      var url = _this4.url + "/v2/transactions";
      return Promise.resolve(fetch(url, {
        method: 'POST',
        credentials: 'omit',
        headers: {
          'Content-Type': 'application/octet-stream'
        },
        body: hex
      }));
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.fetchContractInterface = function fetchContractInterface(_ref) {
    var contractAddress = _ref.contractAddress,
        contractName = _ref.contractName;

    try {
      var _this6 = this;

      var url = _this6.url + "/v2/contracts/interface/" + contractAddress + "/" + contractName;
      return Promise.resolve(fetch(url)).then(function (response) {
        return Promise.resolve(response.json());
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.callReadOnly = function callReadOnly(_ref2) {
    var contractName = _ref2.contractName,
        contractAddress = _ref2.contractAddress,
        functionName = _ref2.functionName,
        args = _ref2.args;

    try {
      var _this8 = this,
          _arguments2 = arguments;

      var url = _this8.url + "/v2/contracts/call-read/" + contractAddress + "/" + contractName + "/" + functionName;
      var argsStrings = args.map(function (arg) {
        return "0x" + stacksTransactions.serializeCV(arg).toString('hex');
      });
      var body = {
        sender: 'SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0',
        _arguments2: argsStrings
      };
      console.log(body);
      return Promise.resolve(fetch(url, {
        method: 'POST',
        body: JSON.stringify(body),
        headers: {
          'Content-Type': 'application/json'
        }
      })).then(function (response) {
        if (!response.ok) {
          throw new Error("Unable to call read-only function.");
        }

        return Promise.resolve(response.json()).then(function (data) {
          console.log(data);
          return data;
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.fetchContractSource = function fetchContractSource(_ref3) {
    var contractName = _ref3.contractName,
        contractAddress = _ref3.contractAddress;

    try {
      var _this10 = this;

      var url = _this10.url + "/v2/contracts/source/" + contractAddress + "/" + contractName;
      return Promise.resolve(fetch(url)).then(function (res) {
        var _exit = false;

        var _temp = function () {
          if (res.ok) {
            return Promise.resolve(res.json()).then(function (_ref4) {
              var source = _ref4.source;
              _exit = true;
              return source;
            });
          }
        }();

        return _temp && _temp.then ? _temp.then(function (_result) {
          return _exit ? _result : null;
        }) : _exit ? _temp : null;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  _proto.fetchAddressTransactions = function fetchAddressTransactions(_ref5) {
    var address = _ref5.address;

    try {
      var _this12 = this;

      var url = _this12.url + "/extended/v1/address/" + address + "/transactions";
      return Promise.resolve(fetch(url)).then(function (res) {
        return Promise.resolve(res.json()).then(function (data) {
          return data.results;
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return RPCClient;
}();

exports.RPCClient = RPCClient;
exports.default = RPCClient;
exports.toBN = toBN;
//# sourceMappingURL=rpc-client.cjs.development.js.map
