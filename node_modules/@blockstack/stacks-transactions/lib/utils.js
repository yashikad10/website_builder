"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateStacksAddress = exports.parseReadOnlyResponse = exports.cvToHex = exports.fetchPrivate = exports.isClarityName = exports.hashP2SH = exports.hashP2PKH = exports.hash160 = exports.txidFromData = exports.sha512_256 = exports.omit = exports.cloneDeep = exports.exceedsMaxLengthBytes = exports.hexStringToInt = exports.intToHexString = exports.rightPadHexToLength = exports.leftPadHexToLength = exports.leftPadHex = exports.BufferArray = exports.randomBytes = void 0;
const sha_js_1 = require("sha.js");
const clarity_1 = require("./clarity");
const ripemd160_min_1 = require("ripemd160-min");
const randombytes = require("randombytes");
exports.randomBytes = randombytes;
const clarity_2 = require("./clarity");
const cross_fetch_1 = require("cross-fetch");
const c32check_1 = require("c32check");
// Note: lodash is using old-style ts exports and requires this
// @ts-expect-error
const lodashCloneDeep = require("lodash/cloneDeep");
class BufferArray {
    constructor() {
        this._value = [];
    }
    get value() {
        return this._value;
    }
    appendHexString(hexString) {
        this.value.push(Buffer.from(hexString, 'hex'));
    }
    push(buffer) {
        return this._value.push(buffer);
    }
    appendByte(octet) {
        if (!Number.isInteger(octet) || octet < 0 || octet > 255) {
            throw new Error(`Value ${octet} is not a valid byte`);
        }
        this.value.push(Buffer.from([octet]));
    }
    concatBuffer() {
        return Buffer.concat(this.value);
    }
}
exports.BufferArray = BufferArray;
exports.leftPadHex = (hexString) => hexString.length % 2 == 0 ? hexString : `0${hexString}`;
exports.leftPadHexToLength = (hexString, length) => hexString.padStart(length, '0');
exports.rightPadHexToLength = (hexString, length) => hexString.padEnd(length, '0');
exports.intToHexString = (integer, lengthBytes = 8) => integer.toString(16).padStart(lengthBytes * 2, '0');
exports.hexStringToInt = (hexString) => parseInt(hexString, 16);
exports.exceedsMaxLengthBytes = (string, maxLengthBytes) => string ? Buffer.from(string).length > maxLengthBytes : false;
function cloneDeep(obj) {
    return lodashCloneDeep(obj);
}
exports.cloneDeep = cloneDeep;
function omit(obj, prop) {
    const clone = cloneDeep(obj);
    // @ts-expect-error
    delete clone[prop];
    return clone;
}
exports.omit = omit;
class sha512_256 extends sha_js_1.sha512 {
    constructor() {
        super();
        // set the "SHA-512/256" initialization vector
        // see https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
        Object.assign(this, {
            _ah: 0x22312194,
            _al: 0xfc2bf72c,
            _bh: 0x9f555fa3,
            _bl: 0xc84c64c2,
            _ch: 0x2393b86b,
            _cl: 0x6f53b151,
            _dh: 0x96387719,
            _dl: 0x5940eabd,
            _eh: 0x96283ee2,
            _el: 0xa88effe3,
            _fh: 0xbe5e1e25,
            _fl: 0x53863992,
            _gh: 0x2b0199fc,
            _gl: 0x2c85b8aa,
            _hh: 0x0eb72ddc,
            _hl: 0x81c52ca2,
        });
    }
    digest(encoding) {
        // "SHA-512/256" truncates the digest to 32 bytes
        const buff = super.digest().slice(0, 32);
        return encoding ? buff.toString(encoding) : buff;
    }
}
exports.sha512_256 = sha512_256;
exports.txidFromData = (data) => new sha512_256().update(data).digest('hex');
exports.hash160 = (input) => {
    const sha256Result = new sha_js_1.sha256().update(input).digest();
    return Buffer.from(new ripemd160_min_1.default().update(sha256Result).digest());
};
// Internally, the Stacks blockchain encodes address the same as Bitcoin
// single-sig address (p2pkh)
exports.hashP2PKH = (input) => {
    return exports.hash160(input).toString('hex');
};
// Internally, the Stacks blockchain encodes address the same as Bitcoin
// multi-sig address (p2sh)
exports.hashP2SH = (numSigs, pubKeys) => {
    if (numSigs > 15 || pubKeys.length > 15) {
        throw Error('P2SH multisig address can only contain up to 15 public keys');
    }
    // construct P2SH script
    const bufferArray = new BufferArray();
    // OP_n
    bufferArray.appendByte(80 + numSigs);
    // public keys prepended by their length
    pubKeys.forEach(pubKey => {
        bufferArray.appendByte(pubKey.length);
        bufferArray.push(pubKey);
    });
    // OP_m
    bufferArray.appendByte(80 + pubKeys.length);
    // OP_CHECKMULTISIG
    bufferArray.appendByte(174);
    const redeemScript = bufferArray.concatBuffer();
    const redeemScriptHash = exports.hash160(redeemScript);
    return redeemScriptHash.toString('hex');
};
function isClarityName(name) {
    const regex = /^[a-zA-Z]([a-zA-Z0-9]|[-_!?+<>=/*])*$|^[-+=/*]$|^[<>]=?$/;
    return regex.test(name) && name.length < 128;
}
exports.isClarityName = isClarityName;
/** @ignore */
function fetchPrivate(input, init) {
    return __awaiter(this, void 0, void 0, function* () {
        const defaultFetchOpts = {
            referrer: 'no-referrer',
            referrerPolicy: 'no-referrer',
        };
        const fetchOpts = Object.assign(defaultFetchOpts, init);
        const fetchResult = yield cross_fetch_1.default(input, fetchOpts);
        return fetchResult;
    });
}
exports.fetchPrivate = fetchPrivate;
function cvToHex(cv) {
    const serialized = clarity_1.serializeCV(cv);
    return `0x${serialized.toString('hex')}`;
}
exports.cvToHex = cvToHex;
exports.parseReadOnlyResponse = ({ result }) => {
    const hex = result.slice(2);
    const bufferCV = Buffer.from(hex, 'hex');
    return clarity_2.deserializeCV(bufferCV);
};
exports.validateStacksAddress = (stacksAddress) => {
    try {
        c32check_1.c32addressDecode(stacksAddress);
        return true;
    }
    catch (e) {
        return false;
    }
};
//# sourceMappingURL=utils.js.map