"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeTransaction = exports.StacksTransaction = void 0;
const constants_1 = require("./constants");
const authorization_1 = require("./authorization");
const utils_1 = require("./utils");
const payload_1 = require("./payload");
const types_1 = require("./types");
const errors_1 = require("./errors");
class StacksTransaction {
    constructor(version, auth, payload, postConditions, postConditionMode, anchorMode, chainId) {
        this.version = version;
        this.auth = auth;
        this.payload = payload;
        this.chainId = chainId !== null && chainId !== void 0 ? chainId : constants_1.DEFAULT_CHAIN_ID;
        this.postConditionMode = postConditionMode !== null && postConditionMode !== void 0 ? postConditionMode : constants_1.PostConditionMode.Deny;
        this.postConditions = postConditions !== null && postConditions !== void 0 ? postConditions : types_1.createLPList([]);
        if (anchorMode) {
            this.anchorMode = anchorMode;
        }
        else {
            switch (payload.payloadType) {
                case constants_1.PayloadType.Coinbase:
                case constants_1.PayloadType.PoisonMicroblock: {
                    this.anchorMode = constants_1.AnchorMode.OnChainOnly;
                    break;
                }
                case constants_1.PayloadType.ContractCall:
                case constants_1.PayloadType.SmartContract:
                case constants_1.PayloadType.TokenTransfer: {
                    this.anchorMode = constants_1.AnchorMode.Any;
                    break;
                }
            }
        }
    }
    signBegin() {
        const tx = utils_1.cloneDeep(this);
        tx.auth = tx.auth.intoInitialSighashAuth();
        return tx.txid();
    }
    verifyBegin() {
        const tx = utils_1.cloneDeep(this);
        tx.auth = tx.auth.intoInitialSighashAuth();
        return tx.txid();
    }
    verifyOrigin() {
        return this.auth.verifyOrigin(this.verifyBegin());
    }
    signNextOrigin(sigHash, privateKey) {
        if (this.auth.spendingCondition === undefined) {
            throw new Error('"auth.spendingCondition" is undefined');
        }
        if (this.auth.authType === undefined) {
            throw new Error('"auth.authType" is undefined');
        }
        return this.signAndAppend(this.auth.spendingCondition, sigHash, constants_1.AuthType.Standard, privateKey);
    }
    signNextSponsor(sigHash, privateKey) {
        if (this.auth.sponsorSpendingCondition === undefined) {
            throw new Error('"auth.spendingCondition" is undefined');
        }
        if (this.auth.authType === undefined) {
            throw new Error('"auth.authType" is undefined');
        }
        return this.signAndAppend(this.auth.sponsorSpendingCondition, sigHash, constants_1.AuthType.Sponsored, privateKey);
    }
    appendPubkey(publicKey) {
        const cond = this.auth.spendingCondition;
        if (cond && !authorization_1.isSingleSig(cond)) {
            cond.fields.push(authorization_1.createTransactionAuthField(publicKey));
        }
        else {
            throw new Error(`Can't append public key to a singlesig condition`);
        }
    }
    signAndAppend(condition, curSigHash, authType, privateKey) {
        const { nextSig, nextSigHash } = authorization_1.nextSignature(curSigHash, authType, condition.fee, condition.nonce, privateKey);
        if (authorization_1.isSingleSig(condition)) {
            condition.signature = nextSig;
        }
        else {
            condition.fields.push(authorization_1.createTransactionAuthField(nextSig));
        }
        return nextSigHash;
    }
    txid() {
        const serialized = this.serialize();
        return utils_1.txidFromData(serialized);
    }
    setSponsor(sponsorSpendingCondition) {
        if (this.auth.authType != constants_1.AuthType.Sponsored) {
            throw new errors_1.SigningError('Cannot sponsor sign a non-sponsored transaction');
        }
        this.auth.setSponsor(sponsorSpendingCondition);
    }
    /**
     * Set the total fee to be paid for this transaction
     *
     * @param {BigNum} fee - the fee amount in microstacks
     */
    setFee(amount) {
        this.auth.setFee(amount);
    }
    /**
     * Set the transaction nonce
     *
     * @param {BigNum} nonce - the nonce value
     */
    setNonce(nonce) {
        this.auth.setNonce(nonce);
    }
    /**
     * Set the transaction sponsor nonce
     *
     * @param {BigNum} nonce - the sponsor nonce value
     */
    setSponsorNonce(nonce) {
        this.auth.setSponsorNonce(nonce);
    }
    serialize() {
        if (this.version === undefined) {
            throw new errors_1.SerializationError('"version" is undefined');
        }
        if (this.chainId === undefined) {
            throw new errors_1.SerializationError('"chainId" is undefined');
        }
        if (this.auth === undefined) {
            throw new errors_1.SerializationError('"auth" is undefined');
        }
        if (this.anchorMode === undefined) {
            throw new errors_1.SerializationError('"anchorMode" is undefined');
        }
        if (this.payload === undefined) {
            throw new errors_1.SerializationError('"payload" is undefined');
        }
        const bufferArray = new utils_1.BufferArray();
        bufferArray.appendByte(this.version);
        const chainIdBuffer = Buffer.alloc(4);
        chainIdBuffer.writeUInt32BE(this.chainId, 0);
        bufferArray.push(chainIdBuffer);
        bufferArray.push(this.auth.serialize());
        bufferArray.appendByte(this.anchorMode);
        bufferArray.appendByte(this.postConditionMode);
        bufferArray.push(types_1.serializeLPList(this.postConditions));
        bufferArray.push(payload_1.serializePayload(this.payload));
        return bufferArray.concatBuffer();
    }
}
exports.StacksTransaction = StacksTransaction;
function deserializeTransaction(bufferReader) {
    const version = bufferReader.readUInt8Enum(constants_1.TransactionVersion, n => {
        throw new Error(`Could not parse ${n} as TransactionVersion`);
    });
    const chainId = bufferReader.readUInt32BE();
    const auth = authorization_1.Authorization.deserialize(bufferReader);
    const anchorMode = bufferReader.readUInt8Enum(constants_1.AnchorMode, n => {
        throw new Error(`Could not parse ${n} as AnchorMode`);
    });
    const postConditionMode = bufferReader.readUInt8Enum(constants_1.PostConditionMode, n => {
        throw new Error(`Could not parse ${n} as PostConditionMode`);
    });
    const postConditions = types_1.deserializeLPList(bufferReader, constants_1.StacksMessageType.PostCondition);
    const payload = payload_1.deserializePayload(bufferReader);
    return new StacksTransaction(version, auth, payload, postConditions, postConditionMode, anchorMode, chainId);
}
exports.deserializeTransaction = deserializeTransaction;
//# sourceMappingURL=transaction.js.map