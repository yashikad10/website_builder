/// <reference types="node" />
import { StacksMessageType, TransactionVersion } from './constants';
import { MessageSignature } from './authorization';
import { BufferReader } from './bufferReader';
import { AddressVersion } from './constants';
export interface StacksPublicKey {
    readonly type: StacksMessageType.PublicKey;
    readonly data: Buffer;
}
/** Creates a P2PKH address string from the given private key and tx version. */
export declare function getAddressFromPrivateKey(
/** Private key buffer or hex string */
privateKey: string | Buffer, transactionVersion?: TransactionVersion): string;
/** Creates a P2PKH address string from the given public key and tx version. */
export declare function getAddressFromPublicKey(
/** Public key buffer or hex string */
publicKey: string | Buffer, transactionVersion?: TransactionVersion): string;
export declare function createStacksPublicKey(key: string): StacksPublicKey;
export declare function publicKeyFromSignature(message: string, messageSignature: MessageSignature): string;
export declare function publicKeyFromBuffer(data: Buffer): StacksPublicKey;
export declare function isCompressed(key: StacksPublicKey): boolean;
export declare function publicKeyToString(key: StacksPublicKey): string;
export declare function serializePublicKey(key: StacksPublicKey): Buffer;
export declare function pubKeyfromPrivKey(privateKey: string | Buffer): StacksPublicKey;
export declare function deserializePublicKey(bufferReader: BufferReader): StacksPublicKey;
export interface StacksPrivateKey {
    data: Buffer;
    compressed: boolean;
}
export declare function createStacksPrivateKey(key: string | Buffer): StacksPrivateKey;
export declare function makeRandomPrivKey(): StacksPrivateKey;
export declare function signWithKey(privateKey: StacksPrivateKey, input: string): MessageSignature;
export declare function getSignatureRecoveryParam(signature: string): number;
export declare function parseRecoverableSignature(signature: string): {
    recoveryParam: number;
    r: string;
    s: string;
};
export declare function getPublicKey(privateKey: StacksPrivateKey): StacksPublicKey;
export declare function privateKeyToString(privateKey: StacksPrivateKey): string;
export declare function publicKeyToAddress(version: AddressVersion, publicKey: StacksPublicKey): string;
