"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCapabilities = void 0;
const jsontokens_1 = require("jsontokens");
const provider_1 = require("../provider");
const extractOrValidateCapabilities = (provider, reportedCapabilities) => {
    const validateCapability = (capability) => {
        if (!provider[capability]) {
            return false;
        }
        // The provider might have the method implemented but not ready for use
        if (reportedCapabilities && !reportedCapabilities.has(capability)) {
            return false;
        }
        return true;
    };
    const capabilityMap = {
        call: validateCapability('call'),
        connect: validateCapability('connect'),
        signMessage: validateCapability('signMessage'),
        signTransaction: validateCapability('signTransaction'),
        sendBtcTransaction: validateCapability('sendBtcTransaction'),
        createInscription: validateCapability('createInscription'),
        createRepeatInscriptions: validateCapability('createRepeatInscriptions'),
        signMultipleTransactions: validateCapability('signMultipleTransactions'),
    };
    return Object.entries(capabilityMap).reduce((acc, [capability, value]) => {
        if (value)
            return [...acc, capability];
        return acc;
    }, []);
};
const getCapabilities = async (options) => {
    const provider = await (0, provider_1.getProviderOrThrow)(options.getProvider);
    const request = (0, jsontokens_1.createUnsecuredToken)(options.payload);
    if (provider.getCapabilities) {
        try {
            const response = await provider.getCapabilities(request);
            options.onFinish?.(extractOrValidateCapabilities(provider, new Set(response)));
        }
        catch (error) {
            console.error('[Connect] Error during capabilities request', error);
        }
    }
    try {
        const inferredCapabilities = extractOrValidateCapabilities(provider);
        options.onFinish?.(inferredCapabilities);
    }
    catch (error) {
        console.error('[Connect] Error during capabilities request', error);
        options.onCancel?.();
    }
};
exports.getCapabilities = getCapabilities;
__exportStar(require("./types"), exports);
//# sourceMappingURL=index.js.map