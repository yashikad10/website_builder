{
  "version": 3,
  "sources": ["../../@stacks/connect-ui/dist/esm/session-9db1cb8a.js", "../../@stacks/connect-ui/dist/esm/index-f9076013.js"],
  "sourcesContent": ["// AUTO REGISTERED PROVIDERS\nconst getRegisteredProviders = () => {\n  if (typeof window === 'undefined')\n    return [];\n  if (!window.webbtc_stx_providers)\n    return [];\n  return window.webbtc_stx_providers;\n};\nconst getInstalledProviders = (defaultProviders = []) => {\n  if (typeof window === 'undefined')\n    return [];\n  const registeredProviders = getRegisteredProviders();\n  const additionalInstalledProviders = defaultProviders.filter(defaultProvider => {\n    // already registered, don't add again\n    if (registeredProviders.find(rp => rp.id === defaultProvider.id))\n      return false;\n    // check if default provider is installed (even if not registered)\n    const provider = getProviderFromId(defaultProvider.id);\n    return !!provider;\n  });\n  return registeredProviders.concat(additionalInstalledProviders);\n};\nconst getProviderFromId = (id) => {\n  return id === null || id === void 0 ? void 0 : id.split('.').reduce((acc, part) => acc === null || acc === void 0 ? void 0 : acc[part], window);\n};\n\nconst LOCAL_STORAGE_KEY = 'STX_PROVIDER';\nconst getSelectedProviderId = () => {\n  if (typeof window === 'undefined')\n    return null;\n  return window.localStorage.getItem(LOCAL_STORAGE_KEY);\n};\nconst setSelectedProviderId = (provider) => {\n  if (typeof window !== 'undefined') {\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, provider);\n  }\n};\nconst clearSelectedProviderId = () => {\n  if (typeof window !== 'undefined') {\n    window.localStorage.removeItem(LOCAL_STORAGE_KEY);\n  }\n};\n\nexport { getInstalledProviders as a, getProviderFromId as b, getSelectedProviderId as c, clearSelectedProviderId as d, getRegisteredProviders as g, setSelectedProviderId as s };\n", "const NAMESPACE = 'connect-ui';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* MEMBER_FLAGS.Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    var _a;\n    let scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        if (!isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$tag$)\n            );\n        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    return elm;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n * @param vnode a VNode\n * @param elm an element\n */\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        return true;\n    }\n    return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        {\n            {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n */\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ((flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        getHostRef(elm);\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            visibilityStyle.setAttribute('nonce', nonce);\n        }\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\nconst hostRefs = /*@__PURE__*/ new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    \n    if (!hmrVersionId || !BUILD.hotModuleReplacement) {\n      const processMod = importedModule => {\n        cmpModules.set(bundleId, importedModule);\n        return importedModule[exportName];\n      }\n      switch(bundleId) {\n        \n        case 'connect-modal':\n          return import(\n            /* webpackMode: \"lazy\" */\n            './connect-modal.entry.js').then(processMod, consoleError);\n      }\n    }\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { bootstrapLazy as b, getElement as g, h, promiseResolve as p, registerInstance as r, setNonce as s };\n"],
  "mappings": ";;;;;;AAAA,IACM,wBAOA,uBAcA,mBAIA,mBACA,uBAKA,uBAKA;AArCN;AAAA;AACA,IAAM,yBAAyB,MAAM;AACnC,UAAI,OAAO,WAAW;AACpB,eAAO,CAAC;AACV,UAAI,CAAC,OAAO;AACV,eAAO,CAAC;AACV,aAAO,OAAO;AAAA,IAChB;AACA,IAAM,wBAAwB,CAAC,mBAAmB,CAAC,MAAM;AACvD,UAAI,OAAO,WAAW;AACpB,eAAO,CAAC;AACV,YAAM,sBAAsB,uBAAuB;AACnD,YAAM,+BAA+B,iBAAiB,OAAO,qBAAmB;AAE9E,YAAI,oBAAoB,KAAK,QAAM,GAAG,OAAO,gBAAgB,EAAE;AAC7D,iBAAO;AAET,cAAM,WAAW,kBAAkB,gBAAgB,EAAE;AACrD,eAAO,CAAC,CAAC;AAAA,MACX,CAAC;AACD,aAAO,oBAAoB,OAAO,4BAA4B;AAAA,IAChE;AACA,IAAM,oBAAoB,CAAC,OAAO;AAChC,aAAO,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,MAAM,GAAG,EAAE,OAAO,CAAC,KAAK,SAAS,QAAQ,QAAQ,QAAQ,SAAS,SAAS,IAAI,IAAI,GAAG,MAAM;AAAA,IAChJ;AAEA,IAAM,oBAAoB;AAC1B,IAAM,wBAAwB,MAAM;AAClC,UAAI,OAAO,WAAW;AACpB,eAAO;AACT,aAAO,OAAO,aAAa,QAAQ,iBAAiB;AAAA,IACtD;AACA,IAAM,wBAAwB,CAAC,aAAa;AAC1C,UAAI,OAAO,WAAW,aAAa;AACjC,eAAO,aAAa,QAAQ,mBAAmB,QAAQ;AAAA,MACzD;AAAA,IACF;AACA,IAAM,0BAA0B,MAAM;AACpC,UAAI,OAAO,WAAW,aAAa;AACjC,eAAO,aAAa,WAAW,iBAAiB;AAAA,MAClD;AAAA,IACF;AAAA;AAAA;;;;;;;;;;;;;ACeA,SAAS,yBAAyBA,MAAK;AACnC,MAAI,IAAI,IAAI;AACZ,UAAQ,MAAM,MAAM,KAAKA,KAAI,UAAU,QAAQ,OAAO,SAAS,SAAS,GAAG,cAAc,wBAAwB,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,aAAa,SAAS,OAAO,QAAQ,OAAO,SAAS,KAAK;AAC1N;AA3DA,IAAM,WAUF,SACA,aACA,WACA,cACE,YAOA,YAOA,cAQA,WAIA,QACA,SACA,OACA,eA2BA,GAwDA,UAaA,MAOA,QAwBA,oBAeA,YAQA,WAKA,mBACA,eAgBA,UAuCA,cAmBA,YASA,aAuFA,qBACA,gBACA,eAgCA,WAoEA,WA6BA,cA6EA,gBAyHA,aAgBA,OA4DA,YAeA,kBAKA,gBAeA,eAOA,iBAmCA,YAyBA,qBAsCA,YAQA,MAGA,iBAEA,UACA,UAmCA,gBAyFA,qBAqEA,mBAyCA,sBAKA,eAsGA,UACA,YACA,kBACA,cAcA,mBACA,cACA,YACA,YAkCA,QACA,KACA,KACA,KASA,gBACA,kCASA,eACA,gBACA,WAYA,SAWA,OAeA,UACA;AA12CN;AAAA;AAoyCI;AAAA;AAAA;AAAA;AAAA;AApyCJ,IAAM,YAAY;AAYlB,IAAI,YAAY;AAChB,IAAI,eAAe;AACnB,IAAM,aAAa,CAAC,QAAQ,UAAU,OAAO;AACzC;AACI,eAAO,MAAM;AACT;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,IAAM,aAAa,CAAC,KAAK,gBAAgB;AACrC;AACI,eAAO,MAAM;AACT;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,IAAM,eAAe;AAQrB,IAAM,YAAY,CAAC;AAInB,IAAM,SAAS;AACf,IAAM,UAAU;AAChB,IAAM,QAAQ,CAAC,MAAM,KAAK;AAC1B,IAAM,gBAAgB,CAAC,MAAM;AAEzB,UAAI,OAAO;AACX,aAAO,MAAM,YAAY,MAAM;AAAA,IACnC;AAuBA,IAAM,IAAI,CAAC,UAAU,cAAc,aAAa;AAC5C,UAAI,QAAQ;AACZ,UAAI,SAAS;AACb,UAAI,aAAa;AACjB,YAAM,gBAAgB,CAAC;AACvB,YAAM,OAAO,CAAC,MAAM;AAChB,iBAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC/B,kBAAQ,EAAE,CAAC;AACX,cAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,iBAAK,KAAK;AAAA,UACd,WACS,SAAS,QAAQ,OAAO,UAAU,WAAW;AAClD,gBAAK,SAAS,OAAO,aAAa,cAAc,CAAC,cAAc,KAAK,GAAI;AACpE,sBAAQ,OAAO,KAAK;AAAA,YACxB;AACA,gBAAI,UAAU,YAAY;AAEtB,4BAAc,cAAc,SAAS,CAAC,EAAE,UAAU;AAAA,YACtD,OACK;AAED,4BAAc,KAAK,SAAS,SAAS,MAAM,KAAK,IAAI,KAAK;AAAA,YAC7D;AACA,yBAAa;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,QAAQ;AACb,UAAI,WAAW;AACX;AACI,gBAAM,YAAY,UAAU,aAAa,UAAU;AACnD,cAAI,WAAW;AACX,sBAAU,QACN,OAAO,cAAc,WACf,YACA,OAAO,KAAK,SAAS,EAClB,OAAO,CAAC,MAAM,UAAU,CAAC,CAAC,EAC1B,KAAK,GAAG;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,QAAQ,SAAS,UAAU,IAAI;AACrC,YAAM,UAAU;AAChB,UAAI,cAAc,SAAS,GAAG;AAC1B,cAAM,aAAa;AAAA,MACvB;AACA,aAAO;AAAA,IACX;AASA,IAAM,WAAW,CAAC,KAAK,SAAS;AAC5B,YAAM,QAAQ;AAAA,QACV,SAAS;AAAA,QACT,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,YAAY;AAAA,MAChB;AACA;AACI,cAAM,UAAU;AAAA,MACpB;AACA,aAAO;AAAA,IACX;AACA,IAAM,OAAO,CAAC;AAOd,IAAM,SAAS,CAAC,SAAS,QAAQ,KAAK,UAAU;AAwBhD,IAAM,qBAAqB,CAAC,WAAW,aAAa;AAEhD,UAAI,aAAa,QAAQ,CAAC,cAAc,SAAS,GAAG;AAChD,YAAI,WAAW,GAA8B;AAGzC,iBAAO,cAAc,UAAU,QAAQ,cAAc,MAAM,CAAC,CAAC;AAAA,QACjE;AAEA,eAAO;AAAA,MACX;AAGA,aAAO;AAAA,IACX;AACA,IAAM,aAAa,CAAC,QAAS,WAAW,GAAG,EAAE;AAQ7C,IAAM,YAAY,CAAC,KAAK,MAAM,SAAS;AACnC,YAAM,KAAK,IAAI,GAAG,MAAM,IAAI;AAC5B,UAAI,cAAc,EAAE;AACpB,aAAO;AAAA,IACX;AACA,IAAM,oBAAkC,oBAAI,QAAQ;AACpD,IAAM,gBAAgB,CAACC,UAAS,SAAS,YAAY;AACjD,UAAI,QAAQ,OAAO,IAAIA,QAAO;AAC9B,UAAI,oCAAoC,SAAS;AAC7C,gBAAS,SAAS,IAAI,cAAc;AACpC,YAAI,OAAO,UAAU,UAAU;AAC3B,kBAAQ;AAAA,QACZ,OACK;AACD,gBAAM,YAAY,OAAO;AAAA,QAC7B;AAAA,MACJ,OACK;AACD,gBAAQ;AAAA,MACZ;AACA,aAAO,IAAIA,UAAS,KAAK;AAAA,IAC7B;AACA,IAAM,WAAW,CAAC,oBAAoB,SAAS,MAAM,YAAY;AAC7D,UAAI;AACJ,UAAIA,WAAU,WAAW,OAAO;AAChC,YAAM,QAAQ,OAAO,IAAIA,QAAO;AAGhC,2BAAqB,mBAAmB,aAAa,KAAsC,qBAAqB;AAChH,UAAI,OAAO;AACP,YAAI,OAAO,UAAU,UAAU;AAC3B,+BAAqB,mBAAmB,QAAQ;AAChD,cAAI,gBAAgB,kBAAkB,IAAI,kBAAkB;AAC5D,cAAI;AACJ,cAAI,CAAC,eAAe;AAChB,8BAAkB,IAAI,oBAAqB,gBAAgB,oBAAI,IAAI,CAAE;AAAA,UACzE;AACA,cAAI,CAAC,cAAc,IAAIA,QAAO,GAAG;AAC7B;AACI;AACI,2BAAW,IAAI,cAAc,OAAO;AACpC,yBAAS,YAAY;AAAA,cACzB;AAEA,oBAAM,SAAS,KAAK,IAAI,aAAa,QAAQ,OAAO,SAAS,KAAK,yBAAyB,GAAG;AAC9F,kBAAI,SAAS,MAAM;AACf,yBAAS,aAAa,SAAS,KAAK;AAAA,cACxC;AACA,iCAAmB,aAAa,UAAU,mBAAmB,cAAc,MAAM,CAAC;AAAA,YACtF;AACA,gBAAI,eAAe;AACf,4BAAc,IAAIA,QAAO;AAAA,YAC7B;AAAA,UACJ;AAAA,QACJ,WACS,CAAC,mBAAmB,mBAAmB,SAAS,KAAK,GAAG;AAC7D,6BAAmB,qBAAqB,CAAC,GAAG,mBAAmB,oBAAoB,KAAK;AAAA,QAC5F;AAAA,MACJ;AACA,aAAOA;AAAA,IACX;AACA,IAAM,eAAe,CAAC,YAAY;AAC9B,YAAM,UAAU,QAAQ;AACxB,YAAM,MAAM,QAAQ;AACpB,YAAM,QAAQ,QAAQ;AACtB,YAAM,kBAAkB,WAAW,gBAAgB,QAAQ,SAAS;AACpE,YAAMA,WAAU,SAAS,IAAI,aAAa,IAAI,aAAa,IAAI,YAAY,GAAG,OAAO;AACrF,UAAI,QAAQ,IAA6C;AAQrD,YAAI,MAAM,IAAIA;AACd,YAAI,UAAU,IAAIA,WAAU,IAAI;AAAA,MACpC;AACA,sBAAgB;AAAA,IACpB;AACA,IAAM,aAAa,CAAC,KAAK,SAAS,QAAS,IAAI;AAS/C,IAAM,cAAc,CAAC,KAAK,YAAY,UAAU,UAAU,OAAO,UAAU;AACvE,UAAI,aAAa,UAAU;AACvB,YAAI,SAAS,kBAAkB,KAAK,UAAU;AAC9C,YAAI,KAAK,WAAW,YAAY;AAChC,YAAI,eAAe,SAAS;AACxB,gBAAM,YAAY,IAAI;AACtB,gBAAM,aAAa,eAAe,QAAQ;AAC1C,gBAAM,aAAa,eAAe,QAAQ;AAC1C,oBAAU,OAAO,GAAG,WAAW,OAAO,CAAC,MAAM,KAAK,CAAC,WAAW,SAAS,CAAC,CAAC,CAAC;AAC1E,oBAAU,IAAI,GAAG,WAAW,OAAO,CAAC,MAAM,KAAK,CAAC,WAAW,SAAS,CAAC,CAAC,CAAC;AAAA,QAC3E,WACU,CAAC,UACP,WAAW,CAAC,MAAM,OAClB,WAAW,CAAC,MAAM,KAAK;AAKvB,cAAI,WAAW,CAAC,MAAM,KAAK;AAQvB,yBAAa,WAAW,MAAM,CAAC;AAAA,UACnC,WACS,kBAAkB,KAAK,EAAE,GAAG;AAKjC,yBAAa,GAAG,MAAM,CAAC;AAAA,UAC3B,OACK;AAMD,yBAAa,GAAG,CAAC,IAAI,WAAW,MAAM,CAAC;AAAA,UAC3C;AACA,cAAI,UAAU;AACV,gBAAI,IAAI,KAAK,YAAY,UAAU,KAAK;AAAA,UAC5C;AACA,cAAI,UAAU;AACV,gBAAI,IAAI,KAAK,YAAY,UAAU,KAAK;AAAA,UAC5C;AAAA,QACJ,OACK;AAED,gBAAM,YAAY,cAAc,QAAQ;AACxC,eAAK,UAAW,aAAa,aAAa,SAAU,CAAC,OAAO;AACxD,gBAAI;AACA,kBAAI,CAAC,IAAI,QAAQ,SAAS,GAAG,GAAG;AAC5B,sBAAM,IAAI,YAAY,OAAO,KAAK;AAElC,oBAAI,eAAe,QAAQ;AACvB,2BAAS;AAAA,gBACb,WACS,YAAY,QAAQ,IAAI,UAAU,KAAK,GAAG;AAC/C,sBAAI,UAAU,IAAI;AAAA,gBACtB;AAAA,cACJ,OACK;AACD,oBAAI,UAAU,IAAI;AAAA,cACtB;AAAA,YACJ,SACO,GAAG;AAAA,YAAE;AAAA,UAChB;AACA,cAAI,YAAY,QAAQ,aAAa,OAAO;AACxC,gBAAI,aAAa,SAAS,IAAI,aAAa,UAAU,MAAM,IAAI;AAC3D;AACI,oBAAI,gBAAgB,UAAU;AAAA,cAClC;AAAA,YACJ;AAAA,UACJ,YACU,CAAC,UAAU,QAAQ,KAA8B,UAAU,CAAC,WAAW;AAC7E,uBAAW,aAAa,OAAO,KAAK;AACpC;AACI,kBAAI,aAAa,YAAY,QAAQ;AAAA,YACzC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,IAAM,sBAAsB;AAC5B,IAAM,iBAAiB,CAAC,UAAW,CAAC,QAAQ,CAAC,IAAI,MAAM,MAAM,mBAAmB;AAChF,IAAM,gBAAgB,CAAC,UAAU,UAAUC,YAAW,eAAe;AAIjE,YAAM,MAAM,SAAS,MAAM,aAAa,MAAuC,SAAS,MAAM,OACxF,SAAS,MAAM,OACf,SAAS;AACf,YAAM,gBAAiB,YAAY,SAAS,WAAY;AACxD,YAAM,gBAAgB,SAAS,WAAW;AAC1C;AAEI,aAAK,cAAc,eAAe;AAC9B,cAAI,EAAE,cAAc,gBAAgB;AAChC,wBAAY,KAAK,YAAY,cAAc,UAAU,GAAG,QAAWA,YAAW,SAAS,OAAO;AAAA,UAClG;AAAA,QACJ;AAAA,MACJ;AAEA,WAAK,cAAc,eAAe;AAC9B,oBAAY,KAAK,YAAY,cAAc,UAAU,GAAG,cAAc,UAAU,GAAGA,YAAW,SAAS,OAAO;AAAA,MAClH;AAAA,IACJ;AAWA,IAAM,YAAY,CAAC,gBAAgB,gBAAgB,YAAY,cAAc;AAEzE,YAAMC,YAAW,eAAe,WAAW,UAAU;AACrD,UAAI,IAAI;AACR,UAAI;AACJ,UAAI;AACJ,UAAIA,UAAS,WAAW,MAAM;AAE1B,cAAMA,UAAS,QAAQ,IAAI,eAAeA,UAAS,MAAM;AAAA,MAC7D,OACK;AACD,YAAI,CAAC,WAAW;AACZ,sBAAYA,UAAS,UAAU;AAAA,QACnC;AAEA,cAAMA,UAAS,QAAS,IAAI,gBAAgB,YAAY,SAAS,SAASA,UAAS,KAAK;AAExF,YAAI,aAAaA,UAAS,UAAU,iBAAiB;AACjD,sBAAY;AAAA,QAChB;AAEA;AACI,wBAAc,MAAMA,WAAU,SAAS;AAAA,QAC3C;AACA,YAAI,MAAM,OAAO,KAAK,IAAI,MAAM,MAAM,SAAS;AAG3C,cAAI,UAAU,IAAK,IAAI,MAAM,IAAI,OAAQ;AAAA,QAC7C;AACA,YAAIA,UAAS,YAAY;AACrB,eAAK,IAAI,GAAG,IAAIA,UAAS,WAAW,QAAQ,EAAE,GAAG;AAE7C,wBAAY,UAAU,gBAAgBA,WAAU,CAAC;AAEjD,gBAAI,WAAW;AAEX,kBAAI,YAAY,SAAS;AAAA,YAC7B;AAAA,UACJ;AAAA,QACJ;AACA;AACI,cAAIA,UAAS,UAAU,OAAO;AAE1B,wBAAY;AAAA,UAChB,WACS,IAAI,YAAY,iBAAiB;AAEtC,wBAAY;AAAA,UAChB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAgBA,IAAM,YAAY,CAAC,WAAW,QAAQ,aAAa,QAAQ,UAAU,WAAW;AAC5E,UAAI,eAAgB;AACpB,UAAI;AACJ,UAAI,aAAa,cAAc,aAAa,YAAY,aAAa;AACjE,uBAAe,aAAa;AAAA,MAChC;AACA,aAAO,YAAY,QAAQ,EAAE,UAAU;AACnC,YAAI,OAAO,QAAQ,GAAG;AAClB,sBAAY,UAAU,MAAM,aAAa,QAAQ;AACjD,cAAI,WAAW;AACX,mBAAO,QAAQ,EAAE,QAAQ;AACzB,yBAAa,aAAa,WAAW,MAAM;AAAA,UAC/C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAcA,IAAM,eAAe,CAAC,QAAQ,UAAU,QAAQ,OAAO,QAAQ;AAC3D,aAAO,YAAY,QAAQ,EAAE,UAAU;AACnC,YAAK,QAAQ,OAAO,QAAQ,GAAI;AAC5B,gBAAM,MAAM;AAEZ,cAAI,OAAO;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAqEA,IAAM,iBAAiB,CAAC,WAAW,OAAOA,WAAU,UAAU;AAC1D,UAAI,cAAc;AAClB,UAAI,cAAc;AAClB,UAAI,YAAY,MAAM,SAAS;AAC/B,UAAI,gBAAgB,MAAM,CAAC;AAC3B,UAAI,cAAc,MAAM,SAAS;AACjC,UAAI,YAAY,MAAM,SAAS;AAC/B,UAAI,gBAAgB,MAAM,CAAC;AAC3B,UAAI,cAAc,MAAM,SAAS;AACjC,UAAI;AACJ,aAAO,eAAe,aAAa,eAAe,WAAW;AACzD,YAAI,iBAAiB,MAAM;AAEvB,0BAAgB,MAAM,EAAE,WAAW;AAAA,QACvC,WACS,eAAe,MAAM;AAC1B,wBAAc,MAAM,EAAE,SAAS;AAAA,QACnC,WACS,iBAAiB,MAAM;AAC5B,0BAAgB,MAAM,EAAE,WAAW;AAAA,QACvC,WACS,eAAe,MAAM;AAC1B,wBAAc,MAAM,EAAE,SAAS;AAAA,QACnC,WACS,YAAY,eAAe,aAAa,GAAG;AAKhD,gBAAM,eAAe,aAAa;AAClC,0BAAgB,MAAM,EAAE,WAAW;AACnC,0BAAgB,MAAM,EAAE,WAAW;AAAA,QACvC,WACS,YAAY,aAAa,WAAW,GAAG;AAI5C,gBAAM,aAAa,WAAW;AAC9B,wBAAc,MAAM,EAAE,SAAS;AAC/B,wBAAc,MAAM,EAAE,SAAS;AAAA,QACnC,WACS,YAAY,eAAe,WAAW,GAAG;AAC9C,gBAAM,eAAe,WAAW;AAkBhC,oBAAU,aAAa,cAAc,OAAO,YAAY,MAAM,WAAW;AACzE,0BAAgB,MAAM,EAAE,WAAW;AACnC,wBAAc,MAAM,EAAE,SAAS;AAAA,QACnC,WACS,YAAY,aAAa,aAAa,GAAG;AAC9C,gBAAM,aAAa,aAAa;AAMhC,oBAAU,aAAa,YAAY,OAAO,cAAc,KAAK;AAC7D,wBAAc,MAAM,EAAE,SAAS;AAC/B,0BAAgB,MAAM,EAAE,WAAW;AAAA,QACvC,OACK;AACD;AAKI,mBAAO,UAAU,SAAS,MAAM,WAAW,GAAGA,WAAU,WAAW;AACnE,4BAAgB,MAAM,EAAE,WAAW;AAAA,UACvC;AACA,cAAI,MAAM;AAEN;AACI,4BAAc,MAAM,WAAW,aAAa,MAAM,cAAc,KAAK;AAAA,YACzE;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,cAAc,WAAW;AAEzB,kBAAU,WAAW,MAAM,YAAY,CAAC,KAAK,OAAO,OAAO,MAAM,YAAY,CAAC,EAAE,OAAOA,WAAU,OAAO,aAAa,SAAS;AAAA,MAClI,WACS,cAAc,WAAW;AAI9B,qBAAa,OAAO,aAAa,SAAS;AAAA,MAC9C;AAAA,IACJ;AAmBA,IAAM,cAAc,CAAC,WAAW,eAAe;AAG3C,UAAI,UAAU,UAAU,WAAW,OAAO;AACtC,eAAO;AAAA,MACX;AACA,aAAO;AAAA,IACX;AASA,IAAM,QAAQ,CAAC,UAAUA,cAAa;AAClC,YAAM,MAAOA,UAAS,QAAQ,SAAS;AACvC,YAAM,cAAc,SAAS;AAC7B,YAAM,cAAcA,UAAS;AAC7B,YAAM,MAAMA,UAAS;AACrB,YAAM,OAAOA,UAAS;AACtB,UAAI,SAAS,MAAM;AACf;AAGI,sBAAY,QAAQ,QAAQ,OAAO,QAAQ,kBAAkB,QAAQ;AAAA,QACzE;AACA;AACI;AAII,0BAAc,UAAUA,WAAU,SAAS;AAAA,UAC/C;AAAA,QACJ;AACA,YAAI,gBAAgB,QAAQ,gBAAgB,MAAM;AAG9C,yBAAe,KAAK,aAAaA,WAAU,WAAW;AAAA,QAC1D,WACS,gBAAgB,MAAM;AAE3B,cAAI,SAAS,WAAW,MAAM;AAE1B,gBAAI,cAAc;AAAA,UACtB;AAEA,oBAAU,KAAK,MAAMA,WAAU,aAAa,GAAG,YAAY,SAAS,CAAC;AAAA,QACzE,WACS,gBAAgB,MAAM;AAE3B,uBAAa,aAAa,GAAG,YAAY,SAAS,CAAC;AAAA,QACvD;AACA,YAAI,aAAa,QAAQ,OAAO;AAC5B,sBAAY;AAAA,QAChB;AAAA,MACJ,WACS,SAAS,WAAW,MAAM;AAG/B,YAAI,OAAO;AAAA,MACf;AAAA,IACJ;AAaA,IAAM,aAAa,CAAC,SAAS,oBAAoB;AAC7C,YAAM,UAAU,QAAQ;AACxB,YAAM,WAAW,QAAQ,WAAW,SAAS,MAAM,IAAI;AACvD,YAAM,YAAY,OAAO,eAAe,IAAI,kBAAkB,EAAE,MAAM,MAAM,eAAe;AAC3F,oBAAc,QAAQ;AACtB,gBAAU,QAAQ;AAClB,gBAAU,WAAW;AACrB,cAAQ,UAAU;AAClB,gBAAU,QAAQ,SAAS,QAAS,QAAQ,cAAc;AAC1D;AACI,kBAAU,QAAQ,MAAM;AAAA,MAC5B;AAEA,YAAM,UAAU,SAAS;AAAA,IAC7B;AACA,IAAM,mBAAmB,CAAC,SAAS,sBAAsB;AACrD,UAAI,qBAAqB,CAAC,QAAQ,qBAAqB,kBAAkB,KAAK,GAAG;AAC7E,0BAAkB,KAAK,EAAE,KAAK,IAAI,QAAQ,CAAC,MAAO,QAAQ,oBAAoB,CAAE,CAAC;AAAA,MACrF;AAAA,IACJ;AACA,IAAM,iBAAiB,CAAC,SAAS,kBAAkB;AAC/C;AACI,gBAAQ,WAAW;AAAA,MACvB;AACA,UAAI,QAAQ,UAAU,GAAyC;AAC3D,gBAAQ,WAAW;AACnB;AAAA,MACJ;AACA,uBAAiB,SAAS,QAAQ,mBAAmB;AAIrD,YAAM,WAAW,MAAM,cAAc,SAAS,aAAa;AAC3D,aAAO,UAAU,QAAQ;AAAA,IAC7B;AACA,IAAM,gBAAgB,CAAC,SAAS,kBAAkB;AAC9C,YAAM,cAAc,WAAW,kBAAkB,QAAQ,UAAU,SAAS;AAC5E,YAAM,WAAW,QAAQ;AACzB,UAAI;AACJ,kBAAY;AACZ,aAAO,KAAK,SAAS,MAAM,gBAAgB,SAAS,UAAU,aAAa,CAAC;AAAA,IAChF;AACA,IAAM,kBAAkB,OAAO,SAAS,UAAU,kBAAkB;AAEhE,YAAM,MAAM,QAAQ;AACpB,YAAM,YAAY,WAAW,UAAU,QAAQ,UAAU,SAAS;AAClE,YAAM,KAAK,IAAI,MAAM;AACrB,UAAI,eAAe;AAEf,qBAAa,OAAO;AAAA,MACxB;AACA,YAAM,YAAY,WAAW,UAAU,QAAQ,UAAU,SAAS;AAClE;AACI,mBAAW,SAAS,QAAQ;AAAA,MAChC;AACA,UAAI,IAAI;AAIJ,WAAG,IAAI,CAAC,OAAO,GAAG,CAAC;AACnB,YAAI,MAAM,IAAI;AAAA,MAClB;AACA,gBAAU;AACV,gBAAU;AACV;AACI,cAAM,mBAAmB,IAAI,KAAK;AAClC,cAAM,aAAa,MAAM,oBAAoB,OAAO;AACpD,YAAI,iBAAiB,WAAW,GAAG;AAC/B,qBAAW;AAAA,QACf,OACK;AACD,kBAAQ,IAAI,gBAAgB,EAAE,KAAK,UAAU;AAC7C,kBAAQ,WAAW;AACnB,2BAAiB,SAAS;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ;AACA,IAAM,aAAa,CAAC,SAAS,UAAU,QAAQ;AAC3C,UAAI;AACA,mBAAW,SAAS,OAAO;AAC3B;AACI,kBAAQ,WAAW,CAAC;AAAA,QACxB;AACA;AACI,kBAAQ,WAAW;AAAA,QACvB;AACA;AACI;AAII;AACI,yBAAW,SAAS,QAAQ;AAAA,YAChC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,SACO,GAAG;AACN,qBAAa,GAAG,QAAQ,aAAa;AAAA,MACzC;AACA,aAAO;AAAA,IACX;AACA,IAAM,sBAAsB,CAAC,YAAY;AACrC,YAAM,UAAU,QAAQ,UAAU;AAClC,YAAM,MAAM,QAAQ;AACpB,YAAM,gBAAgB,WAAW,cAAc,OAAO;AACtD,YAAM,oBAAoB,QAAQ;AAClC,UAAI,EAAE,QAAQ,UAAU,KAAyC;AAC7D,gBAAQ,WAAW;AACnB;AAEI,0BAAgB,GAAG;AAAA,QACvB;AACA,sBAAc;AACd;AACI,kBAAQ,iBAAiB,GAAG;AAC5B,cAAI,CAAC,mBAAmB;AACpB,uBAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ,OACK;AACD,sBAAc;AAAA,MAClB;AAGA;AACI,YAAI,QAAQ,mBAAmB;AAC3B,kBAAQ,kBAAkB;AAC1B,kBAAQ,oBAAoB;AAAA,QAChC;AACA,YAAI,QAAQ,UAAU,KAAoC;AACtD,mBAAS,MAAM,eAAe,SAAS,KAAK,CAAC;AAAA,QACjD;AACA,gBAAQ,WAAW,EAAE,IAA0C;AAAA,MACnE;AAAA,IAIJ;AACA,IAAM,aAAa,CAAC,QAAQ;AAGxB;AACI,wBAAgB,IAAI,eAAe;AAAA,MACvC;AACA,eAAS,MAAM,UAAU,KAAK,WAAW,EAAE,QAAQ,EAAE,WAAW,UAAU,EAAE,CAAC,CAAC;AAAA,IAClF;AACA,IAAM,OAAO,CAAC,SAAS,WAAW;AAC9B,aAAO,WAAW,QAAQ,OAAO,QAAQ,KAAK,MAAM,IAAI,OAAO;AAAA,IACnE;AACA,IAAM,kBAAkB,CAAC,QAAQ,IAAI,UAAU,IAAI,UAAU;AAE7D,IAAM,WAAW,CAAC,KAAK,aAAa,WAAW,GAAG,EAAE,iBAAiB,IAAI,QAAQ;AACjF,IAAM,WAAW,CAAC,KAAK,UAAU,QAAQ,YAAY;AAEjD,YAAM,UAAU,WAAW,GAAG;AAC9B,YAAM,SAAS,QAAQ,iBAAiB,IAAI,QAAQ;AACpD,YAAM,QAAQ,QAAQ;AACtB,YAAM,WAAW,QAAQ;AACzB,eAAS,mBAAmB,QAAQ,QAAQ,UAAU,QAAQ,EAAE,CAAC,CAAC;AAElE,YAAM,aAAa,OAAO,MAAM,MAAM,KAAK,OAAO,MAAM,MAAM;AAC9D,YAAM,iBAAiB,WAAW,UAAU,CAAC;AAC7C,WAAK,EAAE,QAAQ,MAA8C,WAAW,WAAc,gBAAgB;AAGlG,gBAAQ,iBAAiB,IAAI,UAAU,MAAM;AAC7C,YAAI,UAAU;AACV,eAAK,SAAS,IAAiC,SAA4C,GAAgC;AAKvH,2BAAe,SAAS,KAAK;AAAA,UACjC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAWA,IAAM,iBAAiB,CAAC,MAAM,SAAS,UAAU;AAC7C,UAAI,QAAQ,WAAW;AAEnB,cAAM,UAAU,OAAO,QAAQ,QAAQ,SAAS;AAChD,cAAM,YAAY,KAAK;AACvB,gBAAQ,IAAI,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM;AACzC,cAAK,cAAc,MACT,QAAQ,KAAmC,cAAc,IAA+B;AAE9F,mBAAO,eAAe,WAAW,YAAY;AAAA,cACzC,MAAM;AAEF,uBAAO,SAAS,MAAM,UAAU;AAAA,cACpC;AAAA,cACA,IAAI,UAAU;AAEV,yBAAS,MAAM,YAAY,UAAU,OAAO;AAAA,cAChD;AAAA,cACA,cAAc;AAAA,cACd,YAAY;AAAA,YAChB,CAAC;AAAA,UACL;AAAA,QACJ,CAAC;AACD,YAAK,QAAQ,GAA2C;AACpD,gBAAM,qBAAqB,oBAAI,IAAI;AACnC,oBAAU,2BAA2B,SAAU,UAAU,WAAW,UAAU;AAC1E,gBAAI,IAAI,MAAM;AACV,oBAAM,WAAW,mBAAmB,IAAI,QAAQ;AAkChD,kBAAI,KAAK,eAAe,QAAQ,GAAG;AAC/B,2BAAW,KAAK,QAAQ;AACxB,uBAAO,KAAK,QAAQ;AAAA,cACxB,WACS,UAAU,eAAe,QAAQ,KACtC,OAAO,KAAK,QAAQ,MAAM,YAC1B,KAAK,QAAQ,KAAK,UAAU;AAI5B;AAAA,cACJ;AACA,mBAAK,QAAQ,IAAI,aAAa,QAAQ,OAAO,KAAK,QAAQ,MAAM,YAAY,QAAQ;AAAA,YACxF,CAAC;AAAA,UACL;AAGA,eAAK,qBAAqB,QACrB;AAAA,YAAO,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI;AAAA;AAAA,UAAkC,EAC5D,IAAI,CAAC,CAAC,UAAU,CAAC,MAAM;AACxB,kBAAM,WAAW,EAAE,CAAC,KAAK;AACzB,+BAAmB,IAAI,UAAU,QAAQ;AACzC,mBAAO;AAAA,UACX,CAAC;AAAA,QACL;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,IAAM,sBAAsB,OAAO,KAAK,SAAS,SAAS,cAAc,SAAS;AAE7E,WAAK,QAAQ,UAAU,QAAiD,GAAG;AACvE;AAEI,kBAAQ,WAAW;AAInB,iBAAO,WAAW,OAAO;AACzB,cAAI,KAAK,MAAM;AAEX,kBAAM,UAAU,WAAW;AAC3B,mBAAO,MAAM;AACb,oBAAQ;AAAA,UACZ;AACA,cAAI,CAAC,KAAK,WAAW;AACjB;AAAA,cAAe;AAAA,cAAM;AAAA,cAAS;AAAA;AAAA,YAA8B;AAC5D,iBAAK,YAAY;AAAA,UACrB;AACA,gBAAM,iBAAiB,WAAW,kBAAkB,QAAQ,SAAS;AAIrE;AACI,oBAAQ,WAAW;AAAA,UACvB;AAKA,cAAI;AACA,gBAAI,KAAK,OAAO;AAAA,UACpB,SACO,GAAG;AACN,yBAAa,CAAC;AAAA,UAClB;AACA;AACI,oBAAQ,WAAW,CAAC;AAAA,UACxB;AACA,yBAAe;AAAA,QACnB;AACA,YAAI,KAAK,OAAO;AAEZ,cAAI,QAAQ,KAAK;AACjB,gBAAMF,WAAU,WAAW,OAAO;AAClC,cAAI,CAAC,OAAO,IAAIA,QAAO,GAAG;AACtB,kBAAM,oBAAoB,WAAW,kBAAkB,QAAQ,SAAS;AACxE,0BAAcA,UAAS,OAAO,CAAC,EAAE,QAAQ,UAAU,EAAyC;AAC5F,8BAAkB;AAAA,UACtB;AAAA,QACJ;AAAA,MACJ;AAEA,YAAM,oBAAoB,QAAQ;AAClC,YAAM,WAAW,MAAM,eAAe,SAAS,IAAI;AACnD,UAAI,qBAAqB,kBAAkB,MAAM,GAAG;AAOhD,0BAAkB,MAAM,EAAE,KAAK,QAAQ;AAAA,MAC3C,OACK;AACD,iBAAS;AAAA,MACb;AAAA,IACJ;AACA,IAAM,oBAAoB,CAAC,QAAQ;AAC/B,WAAK,IAAI,UAAU,OAA8C,GAAG;AAChE,cAAM,UAAU,WAAW,GAAG;AAC9B,cAAM,UAAU,QAAQ;AACxB,cAAM,eAAe,WAAW,qBAAqB,QAAQ,SAAS;AACtE,YAAI,EAAE,QAAQ,UAAU,IAAkC;AAEtD,kBAAQ,WAAW;AACnB;AAGI,gBAAI,oBAAoB;AACxB,mBAAQ,oBAAoB,kBAAkB,cAAc,kBAAkB,MAAO;AAGjF,kBAAI,kBAAkB,KAAK,GAAG;AAG1B,iCAAiB,SAAU,QAAQ,sBAAsB,iBAAkB;AAC3E;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAGA,cAAI,QAAQ,WAAW;AACnB,mBAAO,QAAQ,QAAQ,SAAS,EAAE,IAAI,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM;AACnE,kBAAI,cAAc,MAA8B,IAAI,eAAe,UAAU,GAAG;AAC5E,sBAAM,QAAQ,IAAI,UAAU;AAC5B,uBAAO,IAAI,UAAU;AACrB,oBAAI,UAAU,IAAI;AAAA,cACtB;AAAA,YACJ,CAAC;AAAA,UACL;AACA;AACI,gCAAoB,KAAK,SAAS,OAAO;AAAA,UAC7C;AAAA,QACJ;AACA,qBAAa;AAAA,MACjB;AAAA,IACJ;AACA,IAAM,uBAAuB,CAAC,QAAQ;AAClC,WAAK,IAAI,UAAU,OAA8C,GAAG;AAChE,mBAAW,GAAG;AAAA,MAClB;AAAA,IACJ;AACA,IAAM,gBAAgB,CAAC,aAAa,UAAU,CAAC,MAAM;AACjD,UAAI;AACJ,YAAM,eAAe,WAAW;AAChC,YAAM,UAAU,CAAC;AACjB,YAAM,UAAU,QAAQ,WAAW,CAAC;AACpC,YAAM,iBAAiB,IAAI;AAC3B,YAAM,OAAO,IAAI;AACjB,YAAM,cAA4B,KAAK,cAAc,eAAe;AACpE,YAAM,kBAAgC,IAAI,cAAc,OAAO;AAC/D,YAAM,6BAA6B,CAAC;AACpC,UAAI;AACJ,UAAI,kBAAkB;AACtB,aAAO,OAAO,KAAK,OAAO;AAC1B,UAAI,iBAAiB,IAAI,IAAI,QAAQ,gBAAgB,MAAM,IAAI,OAAO,EAAE;AACxE,kBAAY,IAAI,CAAC,eAAe;AAC5B,mBAAW,CAAC,EAAE,IAAI,CAAC,gBAAgB;AAC/B,gBAAM,UAAU;AAAA,YACZ,SAAS,YAAY,CAAC;AAAA,YACtB,WAAW,YAAY,CAAC;AAAA,YACxB,WAAW,YAAY,CAAC;AAAA,YACxB,aAAa,YAAY,CAAC;AAAA,UAC9B;AACA;AACI,oBAAQ,YAAY,YAAY,CAAC;AAAA,UACrC;AACA,gBAAM,UAAU,QAAQ;AACxB,gBAAM,cAAc,cAAc,YAAY;AAAA;AAAA,YAE1C,YAAY,MAAM;AAEd,oBAAM,IAAI;AACV,qBAAO;AACP,2BAAa,MAAM,OAAO;AAC1B,kBAAI,QAAQ,UAAU,GAA0C;AAK5D;AACI;AACI,yBAAK,aAAa,EAAE,MAAM,OAAO,CAAC;AAAA,kBACtC;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,YACA,oBAAoB;AAChB,kBAAI,iBAAiB;AACjB,6BAAa,eAAe;AAC5B,kCAAkB;AAAA,cACtB;AACA,kBAAI,iBAAiB;AAEjB,2CAA2B,KAAK,IAAI;AAAA,cACxC,OACK;AACD,oBAAI,IAAI,MAAM,kBAAkB,IAAI,CAAC;AAAA,cACzC;AAAA,YACJ;AAAA,YACA,uBAAuB;AACnB,kBAAI,IAAI,MAAM,qBAAqB,IAAI,CAAC;AAAA,YAC5C;AAAA,YACA,mBAAmB;AACf,qBAAO,WAAW,IAAI,EAAE;AAAA,YAC5B;AAAA,UACJ;AACA,kBAAQ,iBAAiB,WAAW,CAAC;AACrC,cAAI,CAAC,QAAQ,SAAS,OAAO,KAAK,CAAC,eAAe,IAAI,OAAO,GAAG;AAC5D,oBAAQ,KAAK,OAAO;AACpB,2BAAe,OAAO,SAAS;AAAA,cAAe;AAAA,cAAa;AAAA,cAAS;AAAA;AAAA,YAAwC,CAAC;AAAA,UACjH;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AACD;AACI,wBAAgB,YAAY,UAAU;AACtC,wBAAgB,aAAa,eAAe,EAAE;AAE9C,cAAM,SAAS,KAAK,IAAI,aAAa,QAAQ,OAAO,SAAS,KAAK,yBAAyB,GAAG;AAC9F,YAAI,SAAS,MAAM;AACf,0BAAgB,aAAa,SAAS,KAAK;AAAA,QAC/C;AACA,aAAK,aAAa,iBAAiB,cAAc,YAAY,cAAc,KAAK,UAAU;AAAA,MAC9F;AAEA,wBAAkB;AAClB,UAAI,2BAA2B,QAAQ;AACnC,mCAA2B,IAAI,CAAC,SAAS,KAAK,kBAAkB,CAAC;AAAA,MACrE,OACK;AACD;AACI,cAAI,IAAI,MAAO,kBAAkB,WAAW,YAAY,EAAE,CAAE;AAAA,QAChE;AAAA,MACJ;AAEA,mBAAa;AAAA,IACjB;AAQA,IAAM,WAAyB,oBAAI,QAAQ;AAC3C,IAAM,aAAa,CAAC,QAAQ,SAAS,IAAI,GAAG;AAC5C,IAAM,mBAAmB,CAAC,cAAc,YAAY,SAAS,IAAK,QAAQ,iBAAiB,cAAe,OAAO;AACjH,IAAM,eAAe,CAAC,KAAK,YAAY;AACnC,YAAM,UAAU;AAAA,QACZ,SAAS;AAAA,QACT,eAAe;AAAA,QACf,WAAW;AAAA,QACX,kBAAkB,oBAAI,IAAI;AAAA,MAC9B;AACA;AACI,gBAAQ,mBAAmB,IAAI,QAAQ,CAAC,MAAO,QAAQ,mBAAmB,CAAE;AAC5E,YAAI,KAAK,IAAI,CAAC;AACd,YAAI,MAAM,IAAI,CAAC;AAAA,MACnB;AACA,aAAO,SAAS,IAAI,KAAK,OAAO;AAAA,IACpC;AACA,IAAM,oBAAoB,CAAC,KAAK,eAAe,cAAc;AAC7D,IAAM,eAAe,CAAC,GAAG,QAAQ,GAAG,QAAQ,OAAO,GAAG,EAAE;AACxD,IAAM,aAA2B,oBAAI,IAAI;AACzC,IAAM,aAAa,CAAC,SAAS,SAAS,iBAAiB;AAEnD,YAAM,aAAa,QAAQ,UAAU,QAAQ,MAAM,GAAG;AACtD,YAAM,WAAW,QAAQ;AACzB,YAAM,SAAS,WAAW,IAAI,QAAQ;AACtC,UAAI,QAAQ;AACR,eAAO,OAAO,UAAU;AAAA,MAC5B;AAEA,UAAI,CAAC,gBAAgB,CAAC,MAAM,sBAAsB;AAChD,cAAM,aAAa,oBAAkB;AACnC,qBAAW,IAAI,UAAU,cAAc;AACvC,iBAAO,eAAe,UAAU;AAAA,QAClC;AACA,gBAAO,UAAU;AAAA,UAEf,KAAK;AACH,mBAAO;AAAA;AAAA,cAEL;AAAA,YAA0B,EAAE,KAAK,YAAY,YAAY;AAAA,QAC/D;AAAA,MACF;AACA,aAKA,yBAAK,QAAQ,YAAY,EAAE,IAAI,KAAK,CAAC,mBAAmB;AACpD;AACI,qBAAW,IAAI,UAAU,cAAc;AAAA,QAC3C;AACA,eAAO,eAAe,UAAU;AAAA,MACpC,GAAG,YAAY;AAAA,IACnB;AACA,IAAM,SAAuB,oBAAI,IAAI;AACrC,IAAM,MAAM,OAAO,WAAW,cAAc,SAAS,CAAC;AACtD,IAAM,MAAM,IAAI,YAAY,EAAE,MAAM,CAAC,EAAE;AACvC,IAAM,MAAM;AAAA,MACR,SAAS;AAAA,MACT,gBAAgB;AAAA,MAChB,KAAK,CAACG,OAAMA,GAAE;AAAA,MACd,KAAK,CAACA,OAAM,sBAAsBA,EAAC;AAAA,MACnC,KAAK,CAAC,IAAI,WAAW,UAAU,SAAS,GAAG,iBAAiB,WAAW,UAAU,IAAI;AAAA,MACrF,KAAK,CAAC,IAAI,WAAW,UAAU,SAAS,GAAG,oBAAoB,WAAW,UAAU,IAAI;AAAA,MACxF,IAAI,CAAC,WAAW,SAAS,IAAI,YAAY,WAAW,IAAI;AAAA,IAC5D;AACA,IAAM,iBAAiB,CAAC,MAAM,QAAQ,QAAQ,CAAC;AAC/C,IAAM,oCAAkD,MAAM;AACtD,UAAI;AACA,YAAI,cAAc;AAClB,eAAO,OAAO,IAAI,cAAc,EAAE,gBAAgB;AAAA,MACtD,SACO,GAAG;AAAA,MAAE;AACZ,aAAO;AAAA,IACX,GAAG;AAEP,IAAM,gBAAgB,CAAC;AACvB,IAAM,iBAAiB,CAAC;AACxB,IAAM,YAAY,CAAC,OAAO,UAAU,CAAC,OAAO;AACxC,YAAM,KAAK,EAAE;AACb,UAAI,CAAC,cAAc;AACf,uBAAe;AACf,YAAI,SAAS,IAAI,UAAU,GAAkC;AACzD,mBAAS,KAAK;AAAA,QAClB,OACK;AACD,cAAI,IAAI,KAAK;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AACA,IAAM,UAAU,CAAC,UAAU;AACvB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,YAAI;AACA,gBAAM,CAAC,EAAE,YAAY,IAAI,CAAC;AAAA,QAC9B,SACO,GAAG;AACN,uBAAa,CAAC;AAAA,QAClB;AAAA,MACJ;AACA,YAAM,SAAS;AAAA,IACnB;AACA,IAAM,QAAQ,MAAM;AAIhB,cAAQ,aAAa;AAErB;AACI,gBAAQ,cAAc;AACtB,YAAK,eAAe,cAAc,SAAS,GAAI;AAG3C,cAAI,IAAI,KAAK;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AACA,IAAM,WAAyB,CAAC,OAAO,eAAe,EAAE,KAAK,EAAE;AAC/D,IAAM,YAA0B,UAAU,gBAAgB,IAAI;AAAA;AAAA;",
  "names": ["doc", "scopeId", "isSvgMode", "newVNode", "h"]
}
